\input texinfo  @c -*-texinfo-*-

@setfilename issues.texi
@settitle Current Spack Issues for HPCToolkit

@ifhtml
@contents
@end ifhtml

@section Introduction

Spack is a moving target and receives multiple commits per day.
Normally, HPCToolkit will build and run successfully with the latest
version of all of its prerequisite packages, but sometimes not.  This
page covers the current known issues where HPCToolkit fails to build
with the latest version of spack.

Report problems to @code{hpctoolkit-forum at rice dot edu}.  But before
reporting a problem, first try the versions recommended in the
@code{packages.yaml} file in the @code{spack} subdirectory of the
hpctoolkit repository.  And always check the latest version of this file
on the hpctoolkit web site.

@example
@uref{http://hpctoolkit.org/spack-issues.html}
@end example

@noindent
Last revised: Sept 1, 2019.

@c ------------------------------------------------------------

@section Current Issues

@subsection (2019-08-28) Cray front-end compilers

@code{Spack compiler find} is currently broken for detecting the
front-end compilers on Cray that HPCToolkit uses.  Normally, you would
load a module for gcc and run @code{spack compiler find} and spack would
add that compiler to @code{compilers.yaml}, but this currently does not
work.

@b{Workaround:} If you have a working @code{compiler:} entry for a
front-end GNU compiler on Cray, then that will continue to work.  If
not, then you will have to add one manually.  For example, this is an
entry for the @code{gcc/7.3.0} module on theta at ANL.  Note that the
front-end operating_system is something like @code{sles12} (not
@code{cnl6}), and the front-end target is @code{x86_64} (not
@code{mic_knl}).

@example
- compiler:
    environment: @{@}
    extra_rpaths: []
    flags: @{@}
    modules:
    - PrgEnv-gnu/6.0.4
    - gcc/7.3.0
    - cray-mpich/7.7.3
    operating_system: sles12
    paths:
      cc:  /opt/gcc/7.3.0/bin/gcc
      cxx: /opt/gcc/7.3.0/bin/g++
      f77: /opt/gcc/7.3.0/bin/gfortran
      fc:  /opt/gcc/7.3.0/bin/gfortran
    spec: gcc@@7.3.0
    target: x86_64
@end example

@c ------------------------------------------------------------

@subsection (2019-08-28) Cuda modules

Sometimes spack misreads the @code{module:} entry for an external
package in @code{packages.yaml}.  This is infrequent and we haven't
identified a clear pattern, but this has happened with the cuda modules
on cori at NERSC.

For example, with the @code{cuda/10.1.168} module for the gpu version of
hpctoolkit on cori, you would use the following entry in
@code{packages.yaml}.

@example
cuda:
  modules:
    cuda@@10.1.168:  cuda/10.1.168
@end example

@noindent
This entry is supposed to work, but doesn't.  The correct cuda prefix is
actually @code{/usr/common/software/cuda/10.1.168}, but spack misreads
this as @code{/usr}.  When this happens, hpctoolkit fails with error
messages showing that spack incorrectly uses the @code{/usr} path.
For example,

@example
==> cuda@@10.1.168 : has external module in cuda/10.1.168
==> cuda@@10.1.168 : is actually installed in /usr

.../configure --prefix='...' ... '--with-cuda=/usr'
>> 208    configure: error: '/usr/include/cuda.h' not found
@end example

@noindent
@b{Workaround:} In @code{packages.yaml}, replace the @code{modules:}
entry with a @code{paths:} prefix.

@example
cuda:
  paths:
    cuda@@10.1.168:  /usr/common/software/cuda/10.1.168
@end example

@c ------------------------------------------------------------

@subsection (2019-08-19) Build-stage not writable

Spack has been reworking the build directory structure and the value for
@code{build-stage} in @code{config.yaml} is currently broken.

@example
build_stage:
  - $tempdir/spack-stage
@end example

@noindent
The problem with this value is that the first user to run spack on this
machine will create the directory, owned by that user and thus not
writable by any other user.  For every other user, spack install will
fail with:

@example
==> Error: No accessible stage paths in:
@end example

@noindent
@b{Workaround:} Change @code{build-stage} in @code{config.yaml} to
another directory that you can write to.

@c ------------------------------------------------------------

@section Recently Resolved Issues

@subsection (2019-06-06) Intel-xed and hpcviewer

Packages that use a spack resource (a second tar file) are currently
broken.  This includes intel-xed (x86_64 only) and hpcviewer (all
platforms).

@noindent
@b{Fixed:} This is now fixed in spack develop in commit
@code{aca1bfdb6a64} on 2019-06-13.

@c ------------------------------------------------------------

@section General Problems

These are general problems that arise from time to time.

@subsection Unable to fetch

Sometimes spack fails to download the source file(s) for some package
and dies with a message similar to this.

@example
==> Fetching from https://ftpmirror.gnu.org/m4/m4-1.4.18.tar.gz failed.
==> Error: FetchError: All fetchers failed for m4-1.4.18-vorbvkcjfac43b7vuswsvnm6xe7w7or5
@end example

@noindent
This problem is usually temporary and the solution is to either wait a
few minutes or an hour and try again, or else download the file manually
and put it into a spack mirror.

@subsection New version breaks the build

Sometimes the latest version of some package breaks the build.  This has
happened a couple of times where a new version of Boost has broken the
build for Dyninst.  The solution is to revert the package to an earlier
version until the rest of the code catches up.

@subsection Spack core breaks the build

Sometimes but rarely, something in the spack core will change or break
the code in some @code{package.py} file.  The solution is to look
through the spack git log and revert the repository to a recent commit
before the breakage.

@c ------------------------------------------------------------

@section Long Term Issues

@subsection Boost 1.68.0

Avoid boost version 1.68.0, it breaks the build for hpctoolkit.  Version
1.70.0 works with the latest version of dyninst (10.1.0), or else 1.66.0
is good and works with all versions of dyninst.

@subsection Elfutils 0.176

Elfutils 0.176 requires glibc 2.16 or later (for @code{aligned_alloc})
and won't work with an older glibc, including RedHat or CentOS 6.x and
Blue Gene.  On systems with an old glibc, use version 0.175.

@bye
