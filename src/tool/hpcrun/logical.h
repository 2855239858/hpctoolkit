// -*-Mode: C++;-*- // technically C99

// * BeginRiceCopyright *****************************************************
//
// $HeadURL$
// $Id$
//
// --------------------------------------------------------------------------
// Part of HPCToolkit (hpctoolkit.org)
//
// Information about sources of support for research and development of
// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.
// --------------------------------------------------------------------------
//
// Copyright ((c)) 2002-2021, Rice University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.
//
// * Neither the name of Rice University (RICE) nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// This software is provided by RICE and contributors "as is" and any
// express or implied warranties, including, but not limited to, the
// implied warranties of merchantability and fitness for a particular
// purpose are disclaimed. In no event shall RICE or contributors be
// liable for any direct, indirect, incidental, special, exemplary, or
// consequential damages (including, but not limited to, procurement of
// substitute goods or services; loss of use, data, or profits; or
// business interruption) however caused and on any theory of liability,
// whether in contract, strict liability, or tort (including negligence
// or otherwise) arising in any way out of the use of this software, even
// if advised of the possibility of such damage.
//
// ******************************************************* EndRiceCopyright *

#include "frame.h"

#include <stdbool.h>

#ifndef LOGICAL_H
#define LOGICAL_H

typedef struct logical_region_t {
  // Generator for the logical stack frames contained within this region.
  // Replaces `frame` with the appropriate data for the `index`'th logical frame.
  // Repeatedly called with increasing `index` until `false` is returned.
  bool (*generator)(void* arg, int index, frame_t* frame);
  void* generator_arg;

  // Number of logical stack frames that will be generated by this region.
  // Can be an overestimate, but should never be an underestimate.
  size_t expected;

  // Range of physical stack frames that need to be replaced by logical ones.
  // This is always calculated based on the stack pointer.
  void* enter;  // First frame to elide (inclusive)
  void* exit;   // Last frame to elide (inclusive)
} logical_region_t;

struct logical_region_segment_t {
  // Mini-stack of logical regions. Grows upward (increasing index).
  logical_region_t regions[4];
  // Previous segment, older regions
  struct logical_region_segment_t* prev;
};

typedef struct logical_region_stack_t {
  // Current depth of the logical region stack
  size_t depth;
  // Linked list of segments for storing logical stack frames
  struct logical_region_segment_t* head;
  // Linked list of "spare" segments to reuse as nessesary
  struct logical_region_segment_t* spare;
} logical_region_stack_t;

// Register the nessesary handler for modifying backtraces
extern void hpcrun_logical_register();

// Initialize an empty logical region stack
extern void hpcrun_logical_stack_init(logical_region_stack_t*);

// Get the current top of a logical stack. Returns NULL if empty.
extern logical_region_t* hpcrun_logical_stack_top(logical_region_stack_t*);

// Push a new region onto a logical stack. Returns the new region entry.
extern logical_region_t* hpcrun_logical_stack_push(logical_region_stack_t*, const logical_region_t*);

// Truncate a logical stack to a particular depth. If the stack is shallower
// than `n`, returns the difference between the current depth and `n`.
extern size_t hpcrun_logical_stack_settop(logical_region_stack_t*, size_t n);

// Pop up to `n` elements off the stack.
static inline void hpcrun_logical_stack_pop(logical_region_stack_t* s, size_t n) {
  hpcrun_logical_stack_settop(s, s->depth > n ? s->depth - n : 0);
}

#endif  // LOGICAL_H
